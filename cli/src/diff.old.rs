use walkdir::{WalkDir, DirEntry};
use anyhow::{Context, Result};
use argh::FromArgs;
use bidiff::DiffParams;
use comde::{Compressor, Decompressor};
use log::*;
use std::{
    fs::{self, File, metadata},
    io::{self, BufReader, BufWriter, Read, Seek, Write},
    path::PathBuf,
    time::Instant,
};

/// Generate and apply binary patches
#[derive(FromArgs, PartialEq, Debug)]
struct Cli {
    #[argh(subcommand)]
    cmd: Command,
}

#[derive(FromArgs, PartialEq, Debug)]
#[argh(subcommand)]
enum Command {
    Diff(Diff),
    Patch(Patch),
    DirDiff(DirDiff),
}

/// Write the diff of two files to a patch file
#[derive(FromArgs, PartialEq, Debug)]
#[argh(subcommand, name = "diff")]
struct Diff {
    #[argh(positional)]
    older: PathBuf,
    #[argh(positional)]
    newer: PathBuf,
    #[argh(positional)]
    patch: PathBuf,
    /// number of partitions
    #[argh(option, default = "1")]
    sort_partitions: usize,
    /// optionally specify a chunk size
    #[argh(option)]
    scan_chunk_size: Option<usize>,
}

/// Write the diff of two directories to a patch file
#[derive(FromArgs, PartialEq, Debug)]
#[argh(subcommand, name = "dir-diff")]
struct DirDiff {
    #[argh(positional)]
    source: PathBuf,
    #[argh(positional)]
    target: PathBuf,
    #[argh(positional)]
    output: PathBuf,
    /// number of partitions
    #[argh(option, default = "1")]
    sort_partitions: usize,
    /// chunk size
    #[argh(option)]
    scan_chunk_size: Option<usize>,
}

/// Apply a patch file generated by this tool
#[derive(FromArgs, PartialEq, Debug)]
#[argh(subcommand, name = "patch")]
struct Patch {
    #[argh(positional)]
    older: PathBuf,
    #[argh(positional)]
    patch: PathBuf,
    #[argh(positional)]
    output: PathBuf,
}

/// Apply a patch file to a directory, generated by this tool
#[derive(FromArgs, PartialEq, Debug)]
#[argh(subcommand, name = "dir-patch")]
struct DirPatch {
    #[argh(positional)]
    source: PathBuf,
    #[argh(positional)]
    patch: PathBuf,
    #[argh(positional)]
    output: PathBuf,
}

fn main() -> Result<()> {
    #[cfg(debug_assertions)]
    std::env::set_var("RUST_BACKTRACE", "1");

    env_logger::builder().init();

    let Cli { cmd } = argh::from_env();
    match cmd {
       Command::Diff(args) => {
            do_diff(&args)?;
        }
        Command::Patch(args) => {
            do_patch(&args)?;
        }
        Command::DirDiff(args) => {
            do_dir_diff(&args)?;
        }
    }

    Ok(())
}

struct FilePatch {
    file: DirEntry, 
    patch_r: pipe::PipeReader,
    patch_w: pipe::PipeWriter,
}

//fn diff_file(source: DirEntry, target: DirEntry) -> Result<PatchComponent, ()> {
//}

fn do_dir_diff(DirDiff {source, target, output, sort_partitions, scan_chunk_size}: &DirDiff) -> Result<()> {
    let mut dirs = Vec::new();
    let mut files = Vec::new();

    for entry in WalkDir::new(source).sort_by_file_name() {
        let entry = entry.unwrap();

        if entry.metadata()?.is_dir() {
            dirs.push(entry);
        } else {
            files.push(entry);
        }
    }

    Ok(())
}

fn do_patch(Patch {older, patch, output}: &Patch) -> Result<()> {
    let start = Instant::now();

    let compatch_r = BufReader::new(File::open(patch).context("open patch file")?);
    let (patch_r, patch_w) = pipe::pipe();

    std::thread::spawn(move || {
        comde::zstd::ZstdDecompressor::new()
            .copy(compatch_r, patch_w)
            .context("decompress")
            .unwrap();
    });

    let older_r = File::open(older)?;
    let mut fresh_r = bipatch::Reader::new(patch_r, older_r).context("read patch")?;
    let mut output_w = BufWriter::new(File::create(output).context("create patch file")?);
    io::copy(&mut fresh_r, &mut output_w).context("write output file")?;

    info!("Completed in {:?}", start.elapsed());

    Ok(())
}

fn do_diff(Diff {older, newer, patch, sort_partitions, scan_chunk_size,}: &Diff) -> Result<()> {
    let start = Instant::now();

    let older_contents = fs::read(older).context("read old file")?;
    let newer_contents = fs::read(newer).context("read new file")?;

    let (mut patch_r, mut patch_w) = pipe::pipe();
    let diff_params = DiffParams::new(*sort_partitions, *scan_chunk_size).unwrap();
    std::thread::spawn(move || {
        bidiff::simple_diff_with_params(
            &older_contents[..],
            &newer_contents[..],
            &mut patch_w,
            &diff_params,
        )
        .context("simple diff with params")
        .unwrap();
    });

    let mut compatch_w = BufWriter::new(File::create(patch).context("create patch file")?);
    comde::zstd::ZstdCompressor::new()
        .compress(&mut compatch_w, &mut patch_r)
        .context("write output file")?;
    compatch_w.flush().context("finish writing output file")?;

    info!("Completed in {:?}", start.elapsed());

    Ok(())
} 
